package main

import (
	"fmt"
	"strings"
	"testing"
)

func parse18string(s string) (*snNumber, error) {
	got, err := parse18FromReader(strings.NewReader(s))
	if err != nil {
		return nil, err
	}
	if len(got) != 1 {
		return nil, fmt.Errorf("expected 1 number, found %s", got)
	}
	return got[0], err
}

func TestReduce18(t *testing.T) {
	cases := []string{
		"[[[[[9,8],1],2],3],4] becomes [[[[0,9],2],3],4]",
		"[7,[6,[5,[4,[3,2]]]]] becomes [7,[6,[5,[7,0]]]]",
		"[[6,[5,[4,[3,2]]]],1] becomes [[6,[5,[7,0]]],3]",
		"[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]] becomes [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]",
		"[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]] becomes [[3,[2,[8,0]]],[9,[5,[7,0]]]]",
	}
	for _, c := range cases {
		t.Run(c, func(t *testing.T) {
			parts := strings.Split(c, " becomes ")
			in, err := parse18string(parts[0])
			if err != nil {
				t.Fatal(err)
			}
			want, err := parse18string(parts[1])
			if err != nil {
				t.Fatal(err)
			}
			got := reduce18(in)
			if !got {
				t.Fatal("expected reduction, got nothing")
			}
			if want.String() != in.String() {
				t.Fatalf("reduce18() = %q, want %q", in.String(), want.String())
			}
		})
	}
}

func mp18(t *testing.T, s string) *snNumber {
	got, err := parse18string(s)
	if err != nil {
		t.Fatal(err)
	}
	gots := stripAnsi(got.String())
	if gots != s {
		t.Fatalf("parse failure %s produced %s", s, gots)
	}
	return got
}

var add18cases = [][3]string{
	{"[[[[4,3],4],4],[7,[[8,4],9]]]",
		"[1,1]",
		"[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"},

	{"[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
		"[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
		"[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"},
	{"[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
		"[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
		"[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"},
	{"[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
		"[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
		"[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"},

	{"[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
		"[7,[5,[[3,8],[1,4]]]]",
		"[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"},

	{"[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
		"[[2,[2,2]],[8,[8,1]]]",
		"[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]"},

	{"[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
		"[2,9]",
		"[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"},

	{"[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
		"[1,[[[9,3],9],[[9,0],[0,7]]]]",
		"[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"},

	{"[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
		"[[[5,[7,4]],7],1]",
		"[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]"},

	{"[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
		"[[[[4,2],2],6],[8,7]]",
		"[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"},
}

func TestAdd18(t *testing.T) {
	for i, c := range add18cases {
		t.Run(fmt.Sprintf("%d: %s + %s=%s", i, c[0], c[1], c[2]), func(t *testing.T) {
			left := mp18(t, c[0])
			right := mp18(t, c[1])
			want := mp18(t, c[2])

			t.Log(left)
			t.Log(right)

			got := add18(left, right)
			if got.String() != want.String() {
				t.Errorf("add gave\n%s\nwant\n%s", got, want)
			}
		})
	}
}

var m18cases = [][2]string{
	{
		`[1,1]
[2,2]
[3,3]
[4,4]`, "[[[[1,1],[2,2]],[3,3]],[4,4]]",
	},
	{
		`[1,1]
[2,2]
[3,3]
[4,4]
[5,5]`, "[[[[3,0],[5,3]],[4,4]],[5,5]]",
	},
	{
		`[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]`, "[[[[5,0],[7,4]],[5,5]],[6,6]]",
	},
	{
		`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]`, "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]",
	},
	{
		`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`, "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]",
	},
}

func TestMultiAdd(t *testing.T) {
	for i, c := range m18cases {
		t.Run(fmt.Sprintf("case %d", i), func(t *testing.T) {
			lines := strings.Split(c[0], "\n")
			var ns []*snNumber
			for _, l := range lines {
				ns = append(ns, mp18(t, strings.TrimSpace(l)))
			}
			got := ns[0]
			for i := 1; i < len(ns); i++ {
				got = add18(got, ns[i])
			}
			want := mp18(t, c[1])
			if got.String() != want.String() {
				t.Errorf("got sum18 of %s, want %s", got, want)
			}
		})
	}
}
